import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Lato } from 'next/font/google';
import { FaWalking } from 'react-icons/fa';

import { useFormik } from 'formik';
import * as Yup from 'yup';

import { AuthLayouts } from '../../../components/layouts/AuthLayout';

import register from '../../../public/cofee.svg';
import { registerUser } from '../api/auth';
import { useAuth } from '@/context/hooks/useAuth';

const lato = Lato({
  weight: ['100', '300', '400', '700', '900'],
  style: 'italic',
  subsets: ['latin'],
  display: 'swap',
});

const FormPage = () => {
  const [form, setform] = useState('Login');
  const { OnLogin } = useAuth();

  const initialValues = {
    loginEmail: '',
    password: '',
    name: '',
    userName: '',
    registerEmail: '',
    Rpassword: '',
  };

  const validationSchema = Yup.object().shape({
    loginEmail: Yup.string().when('form', {
      is: 'Login',
      then: Yup.string()
        .email('Ingresa un correo electrónico válido')
        .required('El correo electrónico es requerido'),
    }),
    password: Yup.string().when('form', {
      is: 'Login',
      then: Yup.string()
        .min(8, 'La contraseña debe tener al menos 8 caracteres')
        .required('La contraseña es requerida'),
    }),
    name: Yup.string().when('form', {
      is: 'Registro',
      then: Yup.string().required('El nombre es requerido'),
    }),
    userName: Yup.string().when('form', {
      is: 'Registro',
      then: Yup.string().required('El nombre de usuario es requerido'),
    }),
    registerEmail: Yup.string().when('form', {
      is: 'Registro',
      then: Yup.string()
        .email('Ingresa un correo electrónico válido')
        .required('El correo electrónico es requerido'),
    }),
    Rpassword: Yup.string().when('form', {
      is: 'Registro',
      then: Yup.string()
        .oneOf([Yup.ref('password')], 'Las contraseñas deben coincidir')
        .required('Repite la contraseña'),
    }),
  });

  const { handleSubmit, handleChange, values, errors, touched } = useFormik({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: async (values) => {
      console.log(form);
      if (form === 'Register') {
        const user = {
          name: values.name,
          username: values.userName,
          email: values.registerEmail,
          password: values.password,
        };
        const data = await registerUser(user);
        console.log(data);
      }
      await OnLogin({ email: values.loginEmail, password: values.password });
    },
  });

  const handdleForm = () => {
    if (form !== 'Register') setform('Register');
    if (form !== 'Login') setform('Login');
  };

  return (
    <AuthLayouts title={form}>
      <div className={`w-screen h-screen flex flex-col justify-center items-center gap-4 bg-dark-secondary-500 ${lato.className}`}>
        <div className='absolute top-10 right-0'>
          <div className='w-28 h-auto rounded-l-md pl-2 bg-dark-primary-200'>
            <button className='font-semibold text-1xl w-full  text-dark-third-700'
              onClick={handdleForm}
            >
              {form !== 'Register' ? "Go Register" : "Go Login"}
            </button>
          </div>
        </div>

        <div className='h-16 absolute top-5 left-10'>
          <h1 className='text-4xl font-extrabold'> {form === 'Register' ? "Let's sign you in." : ""}</h1>
          <h5 className='text-2xl font-medium'>
            {form === 'Register' ? "We want to show you our web!" : ""}
          </h5>
        </div>

        <div className='w-full h-auto flex justify-center'>
          <Image
            src={register}
            width={100}
            height={100}
            alt='register ilustration'
          />
        </div>

        <div className='flex justify-end items-center'>

          <form className='flex flex-wrap place-content-center gap-3 md:w-2/4 lg:w-96  h-3/5 md:h-3/4 lg:rounded-md' onSubmit={handleSubmit}>
            {/* {
              form === 'Register' &&
              <input className='h-12 w-5/6 rounded-md bg-light-primary-100 border border-light-primary-800 p-3'
                placeholder='Name'
                type="text"
                name='name'
                onChange={handleChange}
                value={values.name || ''}  // Ensure a default value of ''
                id='name' />
            }

            {
              form === 'Register' &&
              <input className='h-12 w-5/6 rounded-md bg-light-primary-100 border border-light-primary-800 p-3'
                placeholder='Username'
                type="text"
                name='userName'
                onChange={handleChange}
                value={values.userName || ''}  // Ensure a default value of ''
                id='userName' />
            } */}

            <input
              className='h-12 w-5/6 rounded-md bg-light-primary-100 border border-light-primary-800 p-3'
              placeholder='Email'
              type="text"
              name={form === 'Register' ? 'registerEmail' : 'loginEmail'}
              onChange={handleChange}
              value={values[form === 'Register' ? 'registerEmail' : 'loginEmail'] || ''}
              id='email'
            />
            {touched[form === 'Register' ? 'registerEmail' : 'loginEmail'] && errors[form === 'Register' ? 'registerEmail' : 'loginEmail'] && (
              <div>{errors[form === 'Register' ? 'registerEmail' : 'loginEmail']}</div>
            )}

            <input
              className=' h-12 w-5/6 rounded-md bg-light-primary-100 border border-light-primary-800 p-3'
              placeholder='Password'
              type="password"
              name='password'
              onChange={handleChange}
              value={values.password || ''} // Provide a default value of ''
              id='password'
            />
            {touched.password && errors.password && (
              <div>{errors.password}</div>
            )}
            {/* {
              form === 'Register' &&
              <input className='h-12 w-5/6 rounded-md bg-light-primary-100 border border-light-primary-800 p-3'
                placeholder='Repeat password'
                type="password"
                name='Rpassword'
                onChange={handleChange}
                value={values.Rpassword || ''}
                id='Rpassword' />
            } */}

            <button type='submit' className='h-12 w-2/4 bg-dark-primary-200 text-light-primary-300 rounded-md font-semibold'>
              {form === 'Register' ?
                "Create acount"
                :
                "Login"
              }
            </button>
          </form>
        </div>
        <div className='flex justify-end  w-full px-2 fixed bottom-4 '>
          <Link href={'/'} className='flex justify-center items-center hover:text-white'>
            <FaWalking size={20} />
            <p>  HOME</p>
          </Link>
        </div>
      </div>
    </AuthLayouts>
  )
}


export default FormPage;